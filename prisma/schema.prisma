// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum EmployeeRole {
  EMPLOYEE
  MANAGER
  ADMIN
  RA
  VOLUNTEER
  IT_TECHNICIAN
  NEURO_TECHNICIAN
  INTERN
  CONTRACTOR
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  email         String?   @unique
  password      String?
  created_at    DateTime? @default(now())
  role          Role      @default(USER)
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Organization {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                 String                 @unique
  timezone             String?
  dateFormat           String                 @default("DD/MM/YYYY")
  customEmployeeFields customEmployeeFields[]
  apiKeys              ApiKey[]
  adminUsers           AdminUser[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Employee             Employee[]
}

model customEmployeeFields {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  required Boolean      @default(false)
  org      Organization @relation(fields: [orgId], references: [id])
  orgId    String       @db.ObjectId
}

model ApiKey {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  key       String       @unique
  org       Organization @relation(fields: [orgId], references: [id])
  orgId     String       @db.ObjectId
  createdAt DateTime     @default(now())
}

model AdminUser {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String       @unique
  role  String
  org   Organization @relation(fields: [orgId], references: [id])
  orgId String       @db.ObjectId
}

model Employee {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  org            Organization @relation(fields: [orgId], references: [id])
  orgId          String       @db.ObjectId
  employee_id    String?      @unique
  name           String
  email          String?      @unique
  phone          String?
  position       EmployeeRole @default(EMPLOYEE)
  joinDate       DateTime?
  lastWorkingDay DateTime?

  status EmployeeStatus @default(ACTIVE)
  role   Role           @default(USER)

  customData Json? // Stores dynamic fields based on customEmployeeFields

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  EmployeeSchedule EmployeeSchedule[]
}

model EmployeeSchedule {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orgId         String   @db.ObjectId
  employee_id   String   @db.ObjectId
  employee_name String
  position      String
  date          DateTime
  shift         String
  location      String

  onLeave  Boolean   @default(false)
  // Relation to Employee (optional - if you want to link to Employee model)
  employee Employee? @relation(fields: [employee_id], references: [id])

  // Timestamps (recommended)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for better query performance
  @@index([employee_id])
  @@index([date])
  @@index([shift])
}
